(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{348:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("本文纪录正则表达式的语法学习实践。")]),t._v(" "),s("p",[t._v("正则常见使用场景：")]),t._v(" "),s("ul",[s("li",[t._v("数据验证，例如检查时间字符串是否符合格式；")]),t._v(" "),s("li",[t._v("数据抓取，以特定顺序抓取包含特定文本或内容的网页；")]),t._v(" "),s("li",[t._v("数据包装，将数据从某种原格式转换为另外一种格式；")]),t._v(" "),s("li",[t._v("字符串解析，例如捕获所拥有 URL 的 GET 参数，或捕获一组圆括弧内的文本；")]),t._v(" "),s("li",[t._v("字符串替代，将字符串中的某个字符替换为其它字符。")])]),t._v(" "),s("p",[t._v("在线工具辅助学习：")]),t._v(" "),s("ul",[s("li",[t._v("https://regex101.com/")]),t._v(" "),s("li",[t._v("https://jex.im/regulex/")])]),t._v(" "),s("h2",{attrs:{id:"使用规则说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用规则说明"}},[t._v("#")]),t._v(" 使用规则说明")]),t._v(" "),s("h3",{attrs:{id:"基本语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语句"}},[t._v("#")]),t._v(" 基本语句")]),t._v(" "),s("p",[t._v("正则表达式（可叫作 “regexp”，或 “reg”）包扩 "),s("strong",[t._v("模式")]),t._v(" 和可选的 "),s("strong",[t._v("修饰符")]),t._v("。")]),t._v(" "),s("p",[t._v("有两种创建正则表达式对象的语法。")]),t._v(" "),s("p",[t._v("较长一点的语法：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("regexp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pattern"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"flags"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v('较短一点的语法，使用斜线 "/"：')]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("regexp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("pattern")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有修饰符")]),t._v("\nregexp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("pattern")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("gim")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 带有修饰符 g、m 和 i（后面会讲到）")]),t._v("\n")])])]),s("p",[t._v("这两种语法之间的主要区别在于，使用斜线 "),s("code",[t._v("/.../")]),t._v(" 的模式不允许插入表达式（如带有 "),s("code",[t._v("${...}")]),t._v(" 的字符串模板）。它是完全静态的。")]),t._v(" "),s("p",[t._v("在我们写代码时就知道正则表达式时则会使用斜线的方式 —— 这是最常见的情况。当我们需要从动态生成的字符串“动态”创建正则表达式时，更经常使用 "),s("code",[t._v("new RegExp")]),t._v("。例如：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("prompt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"What tag do you want to find?"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"h2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n​\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regexp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("tag"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 如果在上方输入到 prompt 中的答案是 "h2"，则与 /<h2>/ 相同')]),t._v("\n")])])]),s("p",[s("strong",[t._v("修饰符")])]),t._v(" "),s("ul",[s("li",[t._v("g（global）在第一次完成匹配后并不会返回结果，它会继续搜索剩下的文本。")]),t._v(" "),s("li",[t._v("i（insensitive）令整个表达式不区分大小写（例如/aBc/i 将匹配 AbC）。")]),t._v(" "),s("li",[t._v("m（multi line）启用多行模式，它只影响 ^ 和 $ 的行为。在多行模式下，它们不仅仅匹配文本的开始与末尾，还匹配每一行的开始与末尾。")]),t._v(" "),s("li",[t._v("y （sticky）粘性修饰符 y 使 regexp.exec 精确搜索位置 lastIndex，而不是“从”它开始。")])]),t._v(" "),s("p",[t._v("m 修饰符多行模式：")]),t._v(" "),s("p",[t._v("在这个有多行文本的例子中，模式 "),s("code",[t._v("/^\\d/gm")]),t._v(" 将从每行的开头取一个数字：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("1st place: Winnie\n2nd place: Piglet\n3rd place: Eeyore")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\d")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("gm")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1, 2, 3")]),t._v("\n")])])]),s("p",[t._v("没有修饰符 "),s("code",[t._v("m")]),t._v(" 时，仅会匹配第一个数字 "),s("code",[t._v("1")]),t._v("。")]),t._v(" "),s("p",[t._v("修饰符 y 的搜索：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'let varName = \"value\"'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regexp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\w+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("y")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nregexp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null（位置 3 有一个空格，不是单词）")]),t._v("\n\nregexp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// varName（在位置 4 的单词）")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("注意:/xxx/gi // 修饰符可以复用，不区分大小写+全字匹配")])]),t._v(" "),s("p",[s("strong",[t._v("转义，特殊字符")])]),t._v(" "),s("p",[t._v("正则中存在特殊字符，这些字符在正则表达式中有特殊的含义，例如 "),s("code",[t._v("[ ] { } ( ) \\ ^ $ . | ? * +")]),t._v("。它们用于执行更强大的搜索。")]),t._v(" "),s("p",[t._v("要将特殊字符用作常规字符，请在其前面加上反斜杠："),s("code",[t._v("\\")]),t._v(", 这就是转义符。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Chapter 5.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d\\.\\d")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5.1（匹配了！）")]),t._v("\n")])])]),s("p",[t._v("当将字符串传递给给 new RegExp 时，我们需要双反斜杠 "),s("code",[t._v("\\\\")]),t._v("，因为字符串引号会消耗一个反斜杠:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regStr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\d\\\\.\\\\d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \\d\\.\\d（现在对了）")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regexp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Chapter 5.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5.1")]),t._v("\n")])])]),s("p",[s("strong",[t._v("锚点：^ 和 $")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("^The        匹配任何以“The”开头的字符串 -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Try it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https://regex101.com/r/cO8lqs/2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nend$        匹配以“end”为结尾的字符串\n^The end$   抽取匹配从“The”开始到“end”结束的字符串\nroar        匹配任何带有文本“roar”的字符串\n")])])]),s("p",[s("strong",[t._v("边界符：\\b 和 \\B")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("babc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("b          执行整词匹配搜索 -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Try it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https://regex101.com/r/cO8lqs/25"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("\\b 如插入符号那样表示一个锚点（它与$和^相同）来匹配位置，其中一边是一个单词符号（如\\w），另一边不是单词符号（例如它可能是字符串的起始点或空格符号）。")]),t._v(" "),s("p",[t._v("它同样能表达相反的非单词边界「\\B」，它会匹配「\\b」不会匹配的位置，如果我们希望找到被单词字符环绕的搜索模式，就可以使用它。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Babc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("B          只要是被单词字符环绕的模式就会匹配 -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Try it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https://regex101.com/r/cO8lqs/26"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("strong",[t._v("重复量词符：*、+、？和 {}")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("abc*        匹配在“ab”后面跟着零个或多个“c”的字符串 -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Try it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https://regex101.com/r/cO8lqs/1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nabc+        匹配在“ab”后面跟着一个或多个“c”的字符串\nabc?        匹配在“ab”后面跟着零个或一个“c”的字符串\nabc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("      匹配在“ab”后面跟着两个“c”的字符串\nabc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(","),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("     匹配在“ab”后面跟着两个或更多“c”的字符串\nabc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2,5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    匹配在“ab”后面跟着2到5个“c”的字符串\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("*      匹配在“a”后面跟着零个或更多“bc”序列的字符串\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2,5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  匹配在“a”后面跟着2到5个“bc”序列的字符串\n")])])]),s("p",[s("strong",[t._v("或运算符：| 、 []")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     匹配在“a”后面跟着“b”或“c”的字符串 -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Try it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https://regex101.com/r/cO8lqs/3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("bc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      匹配在“a”后面跟着“b”或“c”的字符串\n")])])]),s("p",[s("strong",[t._v("字符类：\\d、\\w、\\s")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("d         匹配数字型的单个字符（0-9） -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Try it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https://regex101.com/r/cO8lqs/4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("w         匹配单个词字（字母数字加下划线） -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Try it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https://regex101.com/r/cO8lqs/4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("s         匹配单个空格字符（包括制表符"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("t和换行符"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("n）\n")])])]),s("p",[s("strong",[t._v("反向字符类：\\D、\\W、\\S")])]),t._v(" "),s("p",[t._v("对于每个字符类，都有一个“反向类”，用相同的字母表示，但是大写的。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("D         匹配非数字：除 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("d 以外的任何字符，例如字母。\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("w         匹配非单字字符：除 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("w 以外的任何字符，例如非拉丁字母或空格。\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("s         匹配非空格符号：除 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("s 以外的任何字符，例如字母。\n")])])]),s("p",[s("strong",[t._v("通配字符：.")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("          匹配“任何字符”, 它与“除换行符之外的任何字符”匹配。\n")])])]),s("h3",{attrs:{id:"中级语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中级语句"}},[t._v("#")]),t._v(" 中级语句")]),t._v(" "),s("p",[s("strong",[t._v("捕获组：()")])]),t._v(" "),s("p",[t._v("捕获作用")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("(exp)")]),t._v(" 匹配 exp,并捕获文本到自动命名的组里")]),t._v(" "),s("li",[s("code",[t._v("(?<name>exp)")]),t._v(" 匹配 exp,并捕获文本到名称为 name 的组里，也可以写成 "),s("code",[t._v("(?'name'exp)")])]),t._v(" "),s("li",[s("code",[t._v("(?:exp)")]),t._v("—  匹配 exp,不捕获匹配的文本")])]),t._v(" "),s("p",[t._v("位置指定")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("(?=exp)")]),t._v(" 匹配 exp 前面的位置")]),t._v(" "),s("li",[s("code",[t._v("(?<=exp)")]),t._v(" 匹配 exp 后面的位置")]),t._v(" "),s("li",[s("code",[t._v("(?!exp)")]),t._v(" 匹配后面跟的不是 exp 的位置")]),t._v(" "),s("li",[s("code",[t._v("(?<!exp)")]),t._v(" 匹配前面不是 exp 的位置")])]),t._v(" "),s("p",[s("strong",[t._v("集合和范围：[]")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("abc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("            匹配带有一个“a”、“ab”或“ac”的字符串 -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 与 a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("c 一样 -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Try it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https://regex101.com/r/cO8lqs/7"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a-c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("            匹配带有一个“a”、“ab”或“ac”的字符串 -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 与 a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("c 一样\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a-fA-F0-9"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      匹配一个代表16进制数字的字符串，不区分大小写 -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Try it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https://regex101.com/r/cO8lqs/22"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("-9"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("%           匹配在%符号前面带有0到9这几个字符的字符串\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("^a-zA-Z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("        匹配不带a到z或A到Z的字符串，其中^为否定表达式 -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Try it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https://regex101.com/r/cO8lqs/10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("记住在方括弧内，所有特殊字符（包括反斜杠\\）都会失去它们应有的意义。")]),t._v(" "),s("p",[s("strong",[t._v("贪婪量词和惰性量词")])]),t._v(" "),s("p",[t._v("数量符（* + {}）是一种贪心运算符，所以它们会遍历给定的文本，并尽可能匹配。例如，<.+> 可以匹配文本 "),s("code",[t._v("「This is a <div> simple div</div> test」中的「<div>simple div</div>」")]),t._v("。为了仅捕获 div 标签，我们需要使用「？」令贪心搜索变得 Lazy 一点：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(".+?"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("            一次或多次匹配 “"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("” 和 “"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("” 里面的任何字符，可按需扩展 -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Try it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https://regex101.com/r/cO8lqs/24"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("注意更好的解决方案应该需要避免使用「.」，这有利于实现更严格的正则表达式：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("^"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("         一次或多次匹配 “"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("” 和 “"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("” 里面的任何字符，除去 “"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("” 或 “"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("” 字符 -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Try it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https://regex101.com/r/cO8lqs/23"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("更多懒惰匹配：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("*?         匹配重复任意次，但尽可能少重复\n+?         匹配重复 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 次或更多次，但尽可能少重复\n??         匹配重复 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" 次或 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 次，但尽可能少重复\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n,m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("?     匹配重复n到m次，但尽可能少重复\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n,"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("?      匹配重复n次以上，但尽可能少重复\n")])])]),s("p",[t._v("总结：")]),t._v(" "),s("p",[t._v("量词有两种工作模式：")]),t._v(" "),s("p",[t._v("（1）贪婪模式")]),t._v(" "),s("p",[t._v("默认情况下，正则表达式引擎会尝试尽可能多地重复量词字符。例如，"),s("code",[t._v("\\d+")]),t._v(" 会消耗所有可能的字符。当无法消耗更多（在尾端没有更多的数字或字符串）时，然后它再匹配模式的剩余部分。如果没有匹配，则减少重复的次数（回溯），并再次尝试。")]),t._v(" "),s("p",[t._v("（2）惰性模式")]),t._v(" "),s("p",[t._v("通过在量词后添加问号 "),s("code",[t._v("?")]),t._v(" 来启用。正则表达式引擎尝试在每次重复量化字符之前匹配模式的其余部分。")]),t._v(" "),s("p",[t._v("正如我们所见，惰性模式并不是贪婪搜索的“灵丹妙药”。另一种方式是使用排除项“微调”贪婪搜索，如模式 "),s("code",[t._v('"[^"]+"')]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"高级语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高级语句"}},[t._v("#")]),t._v(" 高级语句")]),t._v(" "),s("p",[s("strong",[t._v("前瞻断言与后瞻断言")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("x(?=y)")]),t._v("—  前瞻断言（零宽先行断言）：匹配 x，不过是只在 x 后跟 y 时才匹配。")]),t._v(" "),s("li",[s("code",[t._v("x(?!y)")]),t._v("—  否定前瞻断言：匹配 x，不过是只在 x 后不跟 y 时才匹配。")]),t._v(" "),s("li",[s("code",[t._v("(?<=y)x")]),t._v("—  肯定的后瞻断言（零宽后行断言）：匹配 x，仅在前面是 y 的情况下。")]),t._v(" "),s("li",[s("code",[t._v("(?<!y)x")]),t._v("—  否定的后瞻断言：匹配 x，仅在前面不是 y 的情况下。")])]),t._v(" "),s("p",[t._v("（1）前瞻断言例子：")]),t._v(" "),s("p",[t._v("比如"),s("code",[t._v("\\b\\w+(?=ing\\b)")]),t._v("，匹配以 ing 结尾的单词的前面部分(除了\ning 以外的部分)，如果在查找 "),s("code",[t._v("I'm singing while you're dancing.")]),t._v(" 时，它会匹配 "),s("code",[t._v("sing")]),t._v(" 和 "),s("code",[t._v("danc")]),t._v("。")]),t._v(" "),s("p",[t._v("（2）后瞻断言例子：")]),t._v(" "),s("p",[t._v("比如"),s("code",[t._v("(?<=\\bre)\\w+\\b")]),t._v("会匹配以"),s("code",[t._v("re")]),t._v("开头的单词的后半部分(除了 re 以外的部分)，例如在查找 "),s("code",[t._v("reading a book")]),t._v(" 时，它匹配 "),s("code",[t._v("ading")]),t._v("。")]),t._v(" "),s("p",[t._v("（3）下面这个例子同时使用了前缀和后缀："),s("code",[t._v("(?<=\\s)\\d+(?=\\s)")]),t._v(" 匹配以空白符间隔的数\n字(再次强调，不包括这些空白符)。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意：后瞻断言的浏览器兼容情况\n请注意：非 V8 引擎的浏览器不支持后瞻断言，例如 Safari、Internet Explorer。")])]),t._v(" "),s("p",[s("strong",[t._v("模式中的反向引用："),s("code",[t._v("\\N")]),t._v(" 和 "),s("code",[t._v("\\k<name>")])])]),t._v(" "),s("p",[t._v("按编号反向引用："),s("code",[t._v("\\N")])]),t._v(" "),s("p",[t._v("我们可以将两种引号都放在方括号中："),s("code",[t._v("['\"](.*?)['\"]")]),t._v("，但它会找到带有混合引号的字符串，例如 "),s("code",[t._v("\"...'")]),t._v(" 和 "),s("code",[t._v("'...\"")]),t._v("。当一种引号出现在另一种引号内，比如在字符串 "),s("code",[t._v('"She\'s the one!"')]),t._v(" 中时，便会导致不正确的匹配：")]),t._v(" "),s("p",[t._v("为了确保模式查找的结束引号与开始的引号完全相同，我们可以将其包装到捕获组中并对其进行反向引用："),s("code",[t._v("(['\"])(.*?)\\1")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('He said: "She\'s the one!".')]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regexp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(['\"])(.*?)\\1")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "She\'s the one!"')]),t._v("\n")])])]),s("p",[t._v("正则表达式引擎会找到第一个引号 "),s("code",[t._v("(['\"])")]),t._v(" 并记住其内容。那是第一个捕获组。")]),t._v(" "),s("p",[t._v("在模式中 "),s("code",[t._v("\\1")]),t._v(" 表示“找到与第一组相同的文本”，在我们的示例中为完全相同的引号。")]),t._v(" "),s("p",[t._v("与此类似，"),s("code",[t._v("\\2")]),t._v(" 表示第二组的内容，"),s("code",[t._v("\\3")]),t._v(" —— 第三分组，依此类推。")]),t._v(" "),s("blockquote",[s("p",[t._v("请注意：\n如果我们在捕获组中使用 ?:，那么我们将无法引用它。用 (?:...) 捕获的组被排除，引擎不会记住它。")])]),t._v(" "),s("p",[t._v("按命名反向引用："),s("code",[t._v("\\k<name>")])]),t._v(" "),s("p",[t._v("如果一个正则表达式中有很多括号，给它们起个名字会便于引用。")]),t._v(" "),s("p",[t._v("要引用命名的捕获组，我们可以使用："),s("code",[t._v("\\k<name>")]),t._v("。")]),t._v(" "),s("p",[t._v("在下面的示例中，带引号的组被命名为 "),s("code",[t._v("?<quote>")]),t._v("，因此反向引用为 "),s("code",[t._v("\\k<quote>")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('He said: "She\'s the one!".')]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regexp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<quote>['\"])(.*?)\\k<quote>")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "She\'s the one!"')]),t._v("\n")])])]),s("h2",{attrs:{id:"正则手纪-方法篇预告"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则手纪-方法篇预告"}},[t._v("#")]),t._v(" 正则手纪 —— 方法篇预告")]),t._v(" "),s("h3",{attrs:{id:"replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[t._v("#")]),t._v(" Replace")]),t._v(" "),s("ol",[s("li",[t._v("在驼峰命名法格式的字符串中添加空格")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeCc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"camelCase"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 应该返回 'camel Case'")]),t._v("\n")])])]),s("p",[t._v("思路分析：")]),t._v(" "),s("ul",[s("li",[t._v("1.首先需要搜索匹配大写字母,使用 "),s("code",[t._v("[A-Z]")]),t._v("可以匹配出 "),s("code",[t._v("C")])]),t._v(" "),s("li",[t._v("2.然后在 "),s("code",[t._v("C")]),t._v(" 之前加入空格，需要拿到 "),s("code",[t._v("C")]),t._v("做变更")])]),t._v(" "),s("p",[t._v("我们需要用捕获括号！捕获括号允许匹配一个值，并且记住它，这样之后就可以用它！")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("用捕获括号来记住匹配到的大写字母\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("A-Z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n之后用 "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v(" 访问捕获到的值\n")])])]),s("p",[t._v("最后实现捕获括号呢？用字符串的 .replace() 方法！我们插入 '$1' 为第二个参数（注意这里一定要用引号）"),s("br"),t._v("\n方法 2：replace() 也可以指定一个函数作为第二个参数")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeCc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("([A-Z])")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" $1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法 2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeCc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[A-Z]")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// test")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeCc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"camelCase"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'camel Case'")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeCc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"helloWorldItIsMe"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'hello World It Is Me'")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("大写第一个字母")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("capitalize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"camel case"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 应该返回 'Camel case'")]),t._v("\n")])])]),s("p",[t._v("使用 "),s("code",[t._v("^")]),t._v("去命中首字母，配合 "),s("code",[t._v("[a-z]")]),t._v("选择首字母中小写的情况")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("capitalize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[a-z]")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// test")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("capitalize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"camel case"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Camel case'")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("大写单词的所有首字母")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("capitalizeAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"camel case"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 应该返回 'Camel Case'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("capitalizeAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\b[a-z]")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// test")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("capitalizeAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"camel case"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Camel Case'")]),t._v("\n")])])]),s("h3",{attrs:{id:"test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test"}},[t._v("#")]),t._v(" Test")]),t._v(" "),s("ol",[s("li",[t._v("手机号码的验证")])]),t._v(" "),s("p",[t._v("规则指定，手机号码除 "),s("code",[t._v("12")]),t._v("和"),s("code",[t._v("11")]),t._v("开头的 11 位数字视为有效")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType_phone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13520646171"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 应该返回 true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType_phone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"11520646171"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 应该返回 false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType_phone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 应该返回 false")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType_phone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^1(3|4|5|6|7|8|9)[0-9]{9}$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// test")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType_phone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13520646171"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  true")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType_phone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"11520646171"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  false")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType_phone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),s("h3",{attrs:{id:"match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#match"}},[t._v("#")]),t._v(" Match")]),t._v(" "),s("p",[t._v("尽可能的取出乱码字符串中的中文及有效符号")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("&lt;p class=&quot;MsoNormal&quot;&gt;\n↵\t在3182例接受磁控胶囊胃镜检查的无症状体检人群中&lt;span&gt;，共检出&lt;/span&gt;7例胃癌，这意味着无症状人群的胃癌检出率为2.2‰，其中50岁以上人群胃癌检出率高达7.4‰！这一研究成果刊发于美国消化领域权威学术期刊GIE&lt;span&gt;（&lt;/span&gt;Gastrointestinal Endoscopy，译名《消化内镜》&lt;span&gt;）。&lt;/span&gt;\n↵&lt;/p&gt;")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getChineseText")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[\\u4e00-\\u9fa5|0-9.\\‰《》]+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"，"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getChineseText")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在3182例接受磁控胶囊胃镜检查的无症状体检人群中，共检出，7例胃癌，这意味着无症状人群的胃癌检出率为2.2‰，其中50岁以上人群胃癌检出率高达7.4‰，这一研究成果刊发于美国消化领域权威学术期刊，译名《消化内镜》")]),t._v("\n")])])]),s("p",[t._v("匹配出地址：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('<https://api.github.com/user/24217900/starred?page=2>; rel="next", <https://api.github.com/user/24217900/starred?page=16>; rel="last"')]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("<.+?>")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* [\n  '<https://api.github.com/user/24217900/starred?page=2>',\n  '<https://api.github.com/user/24217900/starred?page=16>'\n] */")]),t._v("\n")])])]),s("h2",{attrs:{id:"参考链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/46354534",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式的功法大全，做 NLP 再也不怕搞不定字符串了"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("https://zh.javascript.info/")]),t._v(" "),s("li",[t._v("https://juejin.cn/post/7021672733213720613")]),t._v(" "),s("li",[t._v('https://github.com/veedrin/horseshoe "马蹄铁"专题学习计划')]),t._v(" "),s("li",[t._v("正则表达式 30 分钟入门教程(第二版)")]),t._v(" "),s("li",[s("a",{attrs:{href:"http://www.alloyteam.com/2016/10/implement-a-simple-template-engine/",target:"_blank",rel:"noopener noreferrer"}},[t._v("实现一个简单的模板引擎"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://dailc.github.io/2017/07/06/regularExpressionGreedyAndLazy.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("【正则表达式系列】贪婪与非贪婪模式"),s("OutboundLink")],1),t._v("，by "),s("a",{attrs:{href:"https://github.com/dailc",target:"_blank",rel:"noopener noreferrer"}},[t._v("dailc"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/hustskyking/p/principle-of-javascript-template.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 模板引擎原理，几行代码的事儿"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);